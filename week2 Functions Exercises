#### question 1 ####
What do the following programs output? Why?
• Follow the program flow in python tutor, and try to predict what will happen at every step.
# program 1
def f(x):
y = x + 1
print(y)
f(1)

# program 2
def f(x):
y = x + 1
print(y)
f(1)

### solution---

• Program 1 outputs 2
• y is a local variable, getting assigned the value 1 + 1, which is 2:

# program 1
def f(x):
y = x + 1
print(y)
f(1)

• Program 2 outputs a NameError
• y is undefined in the global frame when calling print(y)
# program 2

def f(x):
    y = x + 1
    print(y)
    f(1)

#### question 2 ####
• What does the following program output?
• Follow the program flow in python tutor, and try to predict what will happen at every step.

def f(x):
    y = x + 1
    print(y)
y = 1
f(y)
print(y)

### solution---

• This program prints 1 followed by 2
• The global variable y and the local variable y are two different objects

def f(x):
    y = x + 1
    print(y)
y = 1
f(y)
print(y)

#### question 3 ####

• Write a function called square that takes a parameter named t, which is a turtle object. The
function should use the turtle to draw a square. Create a turtle object, and call square with that
turtle object as an argument.


for i in range(4):
    t.forward(100) 
    t.left(90)
    
square(donatello)
leonardo = turtle.Turtle()
square(leonardo)

• Add another parameter, named length, to square. Modify the body such that the length of the
sides is length, and then modify the function call to provide a second argument. Test your
program with a range of values for length.

def square(t, length):
    for i in range(4):
        t.fd(length)
        t.lt(90)
square(bob, 100)

• Make a copy of square and change the name to polygon. Add another parameter named n and
modify the body so it draws an n-sided regular polygon. Hint: The exterior angles of an n-sided
regular polygon are 360/n degrees.

def polygon(t, n, length):
    angle = 360 / n
    for i in range(n):
        t.fd(length)
        t.lt(angle)
polygon(bob, 7, 70)

• Write a function called circle that takes a turtle and a radius as parameters. The function should
draw an approximate circle by calling polygon with an appropriate length and number of sides.
Test your function with a range of values for the radius parameter. Hint: figure out the
circumference of the circle and make sure that length * n = circumference.
• Make a more general version of circle called arc that takes an additional parameter angle, which
determines what fraction of a circle to draw. angle is in units of degrees, so when angle=360, arc
should draw a complete circle.
    

import math

def circle(t, r):
    circumference = 2 * math.pi * r
     n = 50
     length = circumference / n
     polygon(t, n, length)
     
def circle(t, r):
    circumference = 2 * math.pi * r
    n = int(circumference / 3) + 3
    length = circumference / n
    polygon(t, n, length)     
    
def arc(t, r, angle):
    arc_length = 2 * math.pi * r * angle / 360
    n = int(arc_length / 3) + 1
    step_length = arc_length / n
    step_angle = angle / n
    
for i in range(n):
    t.fd(step_length)
    t.lt(step_angle)    
    
def polyline(t, n, length, angle):
    for i in range(n):
        t.fd(length)
        t.lt(angle) 
        
def polygon(t, n, length):
    angle = 360.0 / n
    polyline(t, n, length, angle)
    
def arc(t, r, angle):
    arc_length = 2 * math.pi * r * angle / 360
    n = int(arc_length / 3) + 1
    step_length = arc_length / n
    step_angle = float(angle) / n
    polyline(t, n, step_length, step_angle)
    
def circle(t, r):
    arc(t, r, 360)        

def polyline(t, n, length, angle):
    """Draws n line segments with the given length and
    angle (in degrees) between them. t is a turtle.
    """
for i in range(n):
    t.fd(length)
    t.lt(angle)
